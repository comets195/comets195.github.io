<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-04-06T13:54:04+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Napster’iOS</title><subtitle>하루하루 열심히.</subtitle><author><name>Napster</name></author><entry><title type="html">[오브젝트] 3. 역할, 책임, 협력</title><link href="http://localhost:4000/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/%EC%97%AD%ED%95%A0,-%EC%B1%85%EC%9E%84,-%ED%98%91%EB%A0%A5/" rel="alternate" type="text/html" title="[오브젝트] 3. 역할, 책임, 협력" /><published>2021-04-06T00:00:00+09:00</published><updated>2021-04-06T00:00:00+09:00</updated><id>http://localhost:4000/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/%EC%97%AD%ED%95%A0,%20%EC%B1%85%EC%9E%84,%20%ED%98%91%EB%A0%A5</id><content type="html" xml:base="http://localhost:4000/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/%EC%97%AD%ED%95%A0,-%EC%B1%85%EC%9E%84,-%ED%98%91%EB%A0%A5/">&lt;h1 id=&quot;역할-책임-협력&quot;&gt;역할, 책임, 협력&lt;/h1&gt;

&lt;p&gt;객체지향 패러다임의 핵심은 역할(role), 책임(responsibilty), 협력(collaboration)이다. 
2장에 있었던 내용들이 안중요한건 아니지만 구현에 너무 치우쳐져 있던 설명이었다. 객체지향 패러다임의 본질과는 조금 거리가 멀다.&lt;/p&gt;

&lt;p&gt;객체지향의 본질은 협력하는 객체들의 공동체를 만들어 내는것. → 적절한 객체를 찾고, 적절한 책임을 할당하는 과정에서 만들어진다.&lt;/p&gt;

&lt;p&gt;즉, 구현 메커니즘은 이러한 일들이 어느정도 자리를 잡은 후에야 해야한다.&lt;/p&gt;

&lt;p&gt;→너무 이른시기에 구현을 해버리면 유연하지 못한 코드를 만들기 쉽다.&lt;/p&gt;

&lt;h1 id=&quot;협력&quot;&gt;협력&lt;/h1&gt;

&lt;p&gt;객체지향 시스템은 자율적인 객체들의 공동체다. 각각의 작은 객체들은 &lt;strong&gt;시스템의 기능이라는 목표를 달성하기위해 서로 협력하는 사회적인 존재&lt;/strong&gt;이다. 자기가 처리 할 수 없는 일을 다른 객체에게 위임하면 전체적인 자율성을 높일 수 있다.&lt;/p&gt;

&lt;p&gt;객체가 다른 객체에게 도움을 요청하는 유일한 방법은 &lt;strong&gt;메시지 전송(message sending)&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;→ 객체는 다른 객체의 상세한 내부 구현에 접근 할 수 없기 때문에 오직 메시지를 통해서만 자신의 요청을 전달 가능.&lt;/p&gt;

&lt;p&gt;수신 받은 객체가 메시지를 처리할 방법을 스스로 선택한다!&lt;/p&gt;

&lt;p&gt;객체를 자율적으로 만드는 가장 기본적인 방법&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;내부 구현을 &lt;strong&gt;캡슐화&lt;/strong&gt; 하는 것&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;어떤걸 가지고 캡슐화 하는 걸까?(상태와 행동)
객체는 상태와 행동을 함께 캡슐화 하는데, 어떤 기준으로 이걸 갖게 만들까?
객체가 참여하고 있는 협력에 따라 상태와 행동은 달라지게 된다. 다시말해, &lt;strong&gt;협력&lt;/strong&gt;은 객체가 필요한 이유와 객체가 수행하는 행동의 동기를 제공한다.&lt;/p&gt;

&lt;p&gt;예) Movie객체가 영화까지 play를 할것 같지만, 실제로 영화 예매 시스템에서는 Movie는 단지 요금을 계산하는 행동과 관련된 것만 있다. 예매를 하기위해 협력에 참여하고 있고, 요금을 계산하는데 책임이 있다는 뜻이다.&lt;/p&gt;

&lt;p&gt;객체의 행동을 결정하는 것이 협력이라면,
객체의 상태를 결정하는 것은 행동이다.
상태는 객체가 행동하는데 필요한 정보에 의해 결정되고,
행동은 협력 안에서 객체가 처리할 메시지로 결정한다.&lt;/p&gt;

&lt;p&gt;즉, 객체가 참여하는 협력이 객체를 구성하는 행동과 상태를 모두 결정함. → 협력은 객체 설계에 필요한 &lt;strong&gt;문맥(context)&lt;/strong&gt;를 제공한다.&lt;/p&gt;

&lt;h1 id=&quot;책임&quot;&gt;책임&lt;/h1&gt;

&lt;p&gt;협력에 참여하기 위해 객체가 수행하는 행동을 &lt;strong&gt;책임&lt;/strong&gt; 이라 부른다. 객체의 책임을 크게 두가지 범주로 나누어 세분화 한다.&lt;/p&gt;

&lt;h3 id=&quot;하는-것doing&quot;&gt;하는 것(doing)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;객체를 생성하거나 계산을 수행하는 등의 스스로 하는 것&lt;/li&gt;
  &lt;li&gt;다른 객체의 행동을 시작시키는 것&lt;/li&gt;
  &lt;li&gt;다른 객체의 활동을 제어하고 조절하는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;아는-것knowing&quot;&gt;아는 것(knowing)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;사적인 정보에 관해 아는 것&lt;/li&gt;
  &lt;li&gt;관련된 객체에 관해 아는 것&lt;/li&gt;
  &lt;li&gt;자신이 유도하거나 계산할 수 있는 것에 관해 아는 것&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;협력 안에서 객체에게 할당한 책임이 ⇒ 외부의 인터페이스 &amp;amp; 내부의 속성을 결정.
결국 하는 것과 아는 것은 밀접하게 연관되어있으며 객체에게 책임을 할당하기 위한 가장 기본적인 원칙에 대한 힌트를 제공한다.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;객체지향 개발에서 가장 중요한 능력은 책임을 능숙하게 소프트웨어 객체에 할당하는 것&quot;
 - 크레이그 라만
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;객체에게 할당할 책임을 결정할 수 있는 문맥을 제공하는건 협력이다. 협력을 잘 구분짓자.
객체에게 얼마나 적절한 책임을 할당하느냐가 설계의 전체적인 품질을 결정한다.&lt;/p&gt;

&lt;p&gt;구현방법 « 책임 책임을 결정한후에 구현을 고민해도 늦지않다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;정보 전문가 패턴: 해당 기능, 정보를 제일 잘알고있는 전문가에게 책임을 할당하는 패턴.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;협력을-설계하는-출발점&quot;&gt;협력을 설계하는 출발점&lt;/h3&gt;

&lt;p&gt;사용자에게 제공하는 기능 (하나의 큰 책임) → 이것을 완료하기 위한 더 작은 책임을 찾고 객체에게 할당 → 반복.&lt;/p&gt;

&lt;p&gt;객체에게 책임을 수행하게 하는 유일한 방법은 &lt;strong&gt;메시지를 전송하는&lt;/strong&gt; 것 뿐이다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;즉  책임을 할당한다는 것은 메시지의 이름을 결정하는 것과 같다.&lt;/li&gt;
  &lt;li&gt;메시지를 처리할 적절한 객체 선택. 정보 전문가 선택
→ 이렇게 결정된 메시지가 객체의 &lt;strong&gt;Public Interface&lt;/strong&gt;가 되는 것이다!!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;책임-주도-설계responsibility-driven-design-rdd&quot;&gt;책임 주도 설계(Responsibility-Driven Design, RDD)&lt;/h3&gt;

&lt;p&gt;책임을 수행할 적절한 객체를 찾아 책임을 할당하는 방식으로 협력을 설계하는 방법
책임을 할당할 때 고려해야 하는 두 가지 요소&lt;/p&gt;

&lt;h3 id=&quot;메시지가-객체를-결정한다&quot;&gt;메시지가 객체를 결정한다&lt;/h3&gt;

&lt;p&gt;객체에게 책임을 할당하는 데 필요한 메시지를 먼저 정의하고, 메시지를 처리할 객체를 나중에 선택한 것이 중요하다. &lt;strong&gt;(메시지가 객체를 선택했다.)&lt;/strong&gt; 객체가 충분히 컴팩트한 인터페이스를 가지게 하고 싶다면 메시지가 객체를 결정하게 해야한다.&lt;/p&gt;

&lt;h3 id=&quot;행동이-상태를-결정한다&quot;&gt;행동이 상태를 결정한다&lt;/h3&gt;

&lt;p&gt;상태를 먼저 정의하고 그에 맞는 행동을 정의하면 캡슐화에 저해된다. 항상 협력이라는 문맥(context)안에서 객체를 생각해야한다.
행동이 중요하다. 상태 ㄴㄴ 
협력이 객체의 행동을 결정하고 행동이 상태를 결정한다. 그리고 그 행동이 객체의 책임이 된다.&lt;/p&gt;

&lt;h1 id=&quot;역할&quot;&gt;역할&lt;/h1&gt;
&lt;p&gt;책임의 집합 = 역할&lt;/p&gt;

&lt;p&gt;역할은 다른 것으로 교체할 수 있는 책임의 집합이다.
&lt;img src=&quot;/assets/images/post-object-2/역할1.png&quot; alt=&quot;&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;할인 요금을 계산하라! 에 대한 메시지를 Amount, Percent각각 구현한다면 코드 중복이다. 따라서 역할로 생각하여 추상화한다.
협력에 적합한 책임을 수행하는 대상이 한 종류라면 간단하게 객체로 간주, 그렇지 않고 여러종류의 객체가 참여할 수 있다면 역할.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/post-object-2/역할2.png&quot; alt=&quot;&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;초반엔 도메인 영역에서 개념, 객체와 역할이 어지럽게 뒤섞여 있으며, 사람들이 세상을 이해할 때 무의식적으로 개념, 객체, 역할을 뒤섞기 때문이다.&lt;/p&gt;

&lt;p&gt;설계 초반엔 적절한 책임과 협력의 큰그림을 탐색하고, 단순하게 객체로 시작했다가 반복적으로 책임과 협력을 정제하면서 필요한 순간에 객체를 역할로 분리해 내는게 가장 좋은 방법.&lt;/p&gt;

&lt;p&gt;작게 시작→역할로 변경. 작게 시작하는 것 부터 구현하라는게 아니라, 책임과 협력을 기준으로 먼저 생각해야한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;틀린점이나 이상한점이 있다면 제보 감사합니다. :)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;모든 그림과 내용은
&lt;a href=&quot;http://www.yes24.com/Product/Goods/74219491&quot; title=&quot;책사기!&quot;&gt;오브젝트: 코드로 이해하는 객체지향 설계 - 조영호&lt;/a&gt;
님의 책에서 나온 내용입니다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Napster</name></author><category term="프로그래밍" /><category term="객체지향 프로그래밍" /><summary type="html">역할, 책임, 협력</summary></entry><entry><title type="html">[오브젝트] 2. 객체지향프로그래밍</title><link href="http://localhost:4000/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/" rel="alternate" type="text/html" title="[오브젝트] 2. 객체지향프로그래밍" /><published>2021-03-31T00:00:00+09:00</published><updated>2021-03-31T00:00:00+09:00</updated><id>http://localhost:4000/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D</id><content type="html" xml:base="http://localhost:4000/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/">&lt;h1 id=&quot;객체지향-프로그래밍&quot;&gt;객체지향 프로그래밍&lt;/h1&gt;

&lt;p&gt;객체지향 패러다임 → 클래스가 아닌 객체에 초점을 맞춰야한다.&lt;/p&gt;

&lt;p&gt;객체…에 집중해야한다. 어떤 객체들이 어떤 상태와 행동을 가지는지 결정한다. 객체는 독립적인 존재가 아니라 기능을 구현하기 위해 협력하는 공동체의 일원이다.&lt;/p&gt;

&lt;p&gt;객체들의 모양과 윤곽이 잡히면, 공통된 특성과 상태를 가진 객체들을 타입으로 분류하고 이 타입을 기반으로 클래스를 구현하자.&lt;/p&gt;

&lt;h3 id=&quot;자율적인-객체&quot;&gt;자율적인 객체&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;객체는 상태와 행동을 함께 가지는 복합적인 존재.&lt;/li&gt;
  &lt;li&gt;객체는 스스로 판단하고 행동하는 자율적인 존재.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;데이터와 기능을 객체 내부로 묶는 것을 캡슐화. 대부분의 객체지향 프로그래밍 언어는 이러한 캡슐화된 객체에 외부의 접근을 통제할 수 있는 접근 제어(access control)이 있다.
← 이렇게 하는 이유는 객체가 스스로 자율화되었기 때문이다. 외부의 간섭을 최소화하고 객체 스스로가 판단하고 처리할 수 있도록.&lt;/p&gt;

&lt;p&gt;캡슐화와 접근제어는 객체를 두 가지부분으로 나누어준다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;퍼블릭 인터페이스 public interface 외부에서 접근 가능한 부분.&lt;/li&gt;
  &lt;li&gt;구현 implementaion 외부에서 접근 불가능하고 오직 내부에서만 접근 가능한 부분.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;→ 인터페이스와 구현의 분리(seperation of interface and implementation)은 훌륭한 객체지향 프로그램을 만들기 위해 따라야하는 핵힘 원칙이다.&lt;/p&gt;

&lt;h3 id=&quot;프로그래머의-자유&quot;&gt;프로그래머의 자유&lt;/h3&gt;

&lt;p&gt;클래스 작성자: 진짜 객체만을 설계하고 구현함.
클라이언트 프로그래머: 클래스 작성자가 만들어준 객체를 가지고 요구사항을 구현함.
클래스 작성자는 적절한 접근 제한자를 사용함으로써 클라이언트 프로그래머에게 구현은닉을 한다. 이렇게되면 서로 인터페이스만 알고 있으면되고 내부에서의 수정은 자유롭게 해도 된다.&lt;/p&gt;

&lt;h3 id=&quot;협력하는-객체들의-공동체&quot;&gt;협력하는 객체들의 공동체&lt;/h3&gt;

&lt;p&gt;의미있는 표현을 위해 금액을 그냥 단순한 Int로 표현하는것보다 Money로 객체로 만들어서 표현하는게 전체적인 설계의 명확성과 유연성을 높이는 첫걸음이다.
객체는 다른 객체와 상호작용할 수 있는 유일한 방법은 메시지 전송(&lt;strong&gt;send a message&lt;/strong&gt;)
객체는 다른객체의 인터페이스에 공개된 행동을 수행하도록 요청(&lt;strong&gt;request&lt;/strong&gt;)하고
요청을 받은 객체는 자율적인 방법(&lt;strong&gt;method&lt;/strong&gt;)에 따라 요청을 처리하여 응답(&lt;strong&gt;response&lt;/strong&gt;)한다.
메시지와 메서드의 구분에서부터 다형성(&lt;strong&gt;polymorphism&lt;/strong&gt;)의 개념이 시작된다.&lt;/p&gt;

&lt;p&gt;코드의 의존성과 실행시점의 의존성이 다를 수 있다! 다시말하면 클래스 사이의 의존성과 객체 사이의 의존성은 동일하지 않을 수 있다라는 뜻!
→ 코드의 의존성과 실행시점의 의존성이 다르면 다를수록 코드를 이해하기는 어려워진다.(당연) 의존성의 양면성은 설계가 트레이드오프의 산물이라는 사실을 보여준다.&lt;/p&gt;

&lt;p&gt;설계가 유연해질수록 코드를 이해하고 디버깅하기는 점점 더 어려워진다.
유연성을 억제하면 코드를 이해하고 디버깅하기는 쉬워지지만 재사용성과 확장 가능성은 낮아진다.&lt;/p&gt;

&lt;p&gt;항상 밸런스를 유지해야한다. 정답은 없다.&lt;/p&gt;

&lt;h3 id=&quot;상속과-인터페이스&quot;&gt;상속과 인터페이스&lt;/h3&gt;

&lt;p&gt;상속이 가치 있는 이유는 부모 클래스가 제공하는 모든 인터페이스를 자식 클래스가 물려 받을 수 있기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;인터페이스는 객체가 이해할 수 있는 메시지의 목록을 정의한것!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;결과적으로 자식 클래스는 부모 클래스가 수신할 수 있는 모든 메시지를 수신할 수 있기 때문에 외부 객체는 자식클래스를 부모클래스와 동일한 타입으로 간주 할 수 있다.&lt;/p&gt;

&lt;p&gt;자식 클래스가 부모클래스를 대신하는것! 업캐스팅(&lt;strong&gt;upcating&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;인터페이스를 재사용할 목적으로 상속을 사용해야한다. 그래야 변경에 유연한 코드를 만들 수 있다.
&lt;img src=&quot;/assets/images/post-object-2/upcasting.png&quot; alt=&quot;&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;다형성&quot;&gt;다형성&lt;/h3&gt;

&lt;p&gt;인터페이스로 정의된 메시지에게 요청을 보내면, 실체화된 객체가 해당 메서드를 실행한다. 이처럼 메시지와 메서드는 엄현히 다른 개념이다. 다시말해, 동일한 메시지를 전달하지만 실제로 어떤 메서드가 실행될지는 실행시점에 달라지게 된다는 것이다. ← 다형성&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다형성은 객체지향 프로그램의 컴파일 시간 의존성과 실행시간 의존성이 다를 수 있다는 사실을 기반으로 한다. 서로 다른 메서드를 실행할 수 있는 원동력!!&lt;/li&gt;
  &lt;li&gt;동일한 메시지를 수신했을 때 객체의 타입에따라 다르게 응답할 수 있는 능력.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;→ 즉 인터페이스가 동일해야 한다는 것이다.
인터페이스를 통일하기 위해 사용된것이 상속이다.
메시지와 메서드를 실행 시점에 바인딩하는 것 → 지연 바인딩(&lt;strong&gt;lazy binding&lt;/strong&gt;), 동적 바인딩(&lt;strong&gt;dynamic binding&lt;/strong&gt;)
이것과는 반대로 컴파일 시점에 실행될 함수나 프로시저를 결정하는 것을 초기바인딩(&lt;strong&gt;early&lt;/strong&gt; &lt;strong&gt;binding&lt;/strong&gt;), 정적 바인딩(&lt;strong&gt;static binding&lt;/strong&gt;)이라한다.
하지만 다형성이란 말은 추상적인 개념이며 꼭 상속을 통한 구현만이 다형성이다라고 할 순 없다.&lt;/p&gt;

&lt;p&gt;?protocol을 위한 채택 서브타이핑?&lt;/p&gt;

&lt;h3 id=&quot;추상화의-힘&quot;&gt;추상화의 힘&lt;/h3&gt;

&lt;p&gt;추상화는 객체를 포괄하는 상위 개념이다. 추상화를 사용할 경우 두가지 장점이 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;추상화의 계층만 따로 떼어 놓고 보면 요구사항의 정책을 높은 수준에서 서술 할 수 있다는것.&lt;/li&gt;
  &lt;li&gt;설계가 좀더 유연해진다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;디자인 패턴(&lt;strong&gt;design pattern&lt;/strong&gt;), 프레임워크(&lt;strong&gt;framework&lt;/strong&gt;)는 모두 추상화를 이용해 상위 정책을 정의하는 객체지향의 메커니즘을 활용한 것이다.&lt;/p&gt;

&lt;p&gt;추상화가 유연한 설계를 가능하게 하는 이유는 설계가 구체적인 상황에 결합되는 것을 방지하기 때문.&lt;/p&gt;

&lt;p&gt;67page&lt;/p&gt;

&lt;h3 id=&quot;상속&quot;&gt;상속&lt;/h3&gt;

&lt;p&gt;상속은 캡슐화를 위반한다. 자식클래스에게 부모클래스의 내부를 보여주고, 자식클래스가 부모클래스에 강하게 결합된다!&lt;/p&gt;

&lt;h3 id=&quot;합성&quot;&gt;합성&lt;/h3&gt;

&lt;p&gt;외부에 주입을 받는 모습이다.
상속을 통해 사용하는 클래스가 세분화 할 수 있게 할 수있지만, 그렇게하면 유연하지 못하게 된다.(상속받은 클래스만 사용해야 하기 때문, 부모 클래스의 코드와 자식 클래스의 코드를 컴파일 시점에 하나의 단위로 강하게 결합 하기 때문) 이 책에선 이렇게 이야기한다.
합성이란, 인터페이스에 정의된 메시지를 통해서만 코드를 재사용하는 방법.
상속이 가지는 두 가지 문제점을 모두 해결한다.
즉, 보통 우리가 구현했던 클래스는 합성이었다는 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;틀린점이나 이상한점이 있다면 제보 감사합니다. :)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;모든 그림과 내용은
&lt;a href=&quot;http://www.yes24.com/Product/Goods/74219491&quot; title=&quot;책사기!&quot;&gt;오브젝트: 코드로 이해하는 객체지향 설계 - 조영호&lt;/a&gt;
님의 책에서 나온 내용입니다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Napster</name></author><category term="프로그래밍" /><category term="객체지향 프로그래밍" /><summary type="html">객체지향 프로그래밍</summary></entry><entry><title type="html">[오브젝트] 1. 객체, 설계</title><link href="http://localhost:4000/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EA%B0%9D%EC%B2%B4,-%EC%84%A4%EA%B3%84/" rel="alternate" type="text/html" title="[오브젝트] 1. 객체, 설계" /><published>2021-03-30T00:00:00+09:00</published><updated>2021-03-30T00:00:00+09:00</updated><id>http://localhost:4000/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EA%B0%9D%EC%B2%B4,%20%EC%84%A4%EA%B3%84</id><content type="html" xml:base="http://localhost:4000/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5/%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-%EA%B0%9D%EC%B2%B4,-%EC%84%A4%EA%B3%84/">&lt;h1 id=&quot;객체-설계&quot;&gt;객체, 설계&lt;/h1&gt;

&lt;p&gt;“이론이 먼저일까, 실무가 먼저일까?”
소프트웨어의 분야는 오랜 역사가 깊지 않기 때문에 이론보다 실무가 먼저이다. 실무가 성숙해지는 시점에 이론이 실무를 추월하는게 보통 정설이다.
객체지향설계의 실무적인 접근을 통해 이론을 배우자.&lt;/p&gt;

&lt;p&gt;클래스간 &lt;strong&gt;의존성(dependency)&lt;/strong&gt;이 높으면 &lt;strong&gt;결합도(coupling)&lt;/strong&gt;가 높고 결합도가 높으면, 변화에 취약하다.
클래스를 &lt;strong&gt;캡슐화(encapsulation)&lt;/strong&gt;를 해야한다. 캡슐화는 개념적으로나 물리적으로 객체 내부의 세부적인 사항을 감추는 것을 말한다. 캡슐화를 하면서 자율적인 존재로 만드는 것!&lt;/p&gt;

&lt;p&gt;밀접하게 연관된 작업만을 수행하고 연관성이 없는건 다른 객체에게 위임하는 객체를 &lt;strong&gt;응집도(cohesion)&lt;/strong&gt; 가 높다고 한다.
계속되는 응집도를 높이는 과정에 의도치 않은 의존성이 생기게된다. → 모든걸 만족하는 설계는 없다. 설계는 균형을 적절하게 지켜야한다. 훌륭한 설계는 적절한 트레이드오프의 결과물이다!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;틀린점이나 이상한점이 있다면 제보 감사합니다. :)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;모든 그림과 내용은 오브젝트: 코드로 이해하는 객체지향 설계 - 조영호 님의 책에서 나온 내용입니다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Napster</name></author><category term="객체" /><category term="설계" /><summary type="html">객체, 설계</summary></entry><entry><title type="html">[iOS] Layer란?</title><link href="http://localhost:4000/ui/CALayer/" rel="alternate" type="text/html" title="[iOS] Layer란?" /><published>2020-10-05T00:00:00+09:00</published><updated>2020-10-05T00:00:00+09:00</updated><id>http://localhost:4000/ui/CALayer</id><content type="html" xml:base="http://localhost:4000/ui/CALayer/">&lt;h1 id=&quot;calayer의-개념을-알아보자&quot;&gt;CALayer의 개념을 알아보자!&lt;/h1&gt;
&lt;hr /&gt;

&lt;h1 id=&quot;layer&quot;&gt;Layer&lt;/h1&gt;

&lt;p&gt;iOS에서의 모든 뷰는 Layer를 가지고있다. Layer는  UIView에 대한 bitmap정보를 포함하고있다. 이 정보들을 GPU에게 제공하여 그래픽처리의 이점을 가져온다. (OpenGL을 이용한 부드러운 화면처리) OpenGL을 직접적으로 다루기엔 너무 비효율적이다. 작은 일에도 많은양의 코드가 필요한 것도 하나의 이유이다. 이러한 불편점을 도움을 주기위해 Core Graphics는 만들어 졌고, 이걸 좀더 쉽게 사용하기위해 Core Animation이 만들어졌다. 이친구는 &lt;code class=&quot;highlighter-rouge&quot;&gt;CALayer &lt;/code&gt; 클래스를 제공해주고 기초단계의 낮은 수준의 그래픽 처리에 접근할 수 있게 해준다. 쉽게말해서 복잡한 OpenGL코드를 몇개의 개념을 모아서 좀더 쉽게 해주는 친구가 &lt;code class=&quot;highlighter-rouge&quot;&gt;CALayer&lt;/code&gt;라는 뜻이다. (이렇게 쉽게 해준것도 잘 못쓰고있으니 참..)&lt;/p&gt;

&lt;p&gt;애플은또 Core Animation의 많은 기능들을 대부분의 앱에서 꼭 필요하지 않게 하기위해 UIKit이란걸 또 만들어주었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.appcoda.com/wp-content/uploads/2016/08/calayer-intro-1024x655.png&quot; alt=&quot;애플에서 그려준 iOS drawing hierarchy&quot; style=&quot;zoom:50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이런 다양한 층을둔 것에 이점은, 프로그래머 마음대로 좀더 낮은 수준(성능을 주로 원하는 작업들, 유연한 커스텀뷰 작업)에 접근하는 코드를 작성할 수도 있고, 아닐 수도 있게 선택지를 준다는 점이다. UIView의 Layer에 여러가지 옵션들을 주고 그릴 수 있는게 주르르륵 있다.&lt;/p&gt;

&lt;h2 id=&quot;calayer-performance&quot;&gt;CALayer Performance&lt;/h2&gt;

&lt;p&gt;그럼 Layer를 이용한 성능향상 팁을 두가지 알아보자.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;drawsAsynchronously&lt;/code&gt; 이걸 true로 하면 CPU가 개입하여 백그라운드 스레드에서 그리는작업을 하게된다. 이건 redrawn이 빈번할때 예를들면 지도, 테이블뷰 라는데, 애플 공식문서에서는 해당 속성을 변경할때는 바꿔서 사용했을때 이점이 있는지 잘생각하고 사용하라고 한다. 기본값은 false이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shouldRasterize&lt;/code&gt; Rasterized(픽셀로 바꾸어 화면상으로 보여줌) 이게 true이면 Layer는 한번만 그려진다. 그리고 언제든 animated될때 다시그려지지 않고, 처음 설정할때 그려진 bitmap정보도 바뀌지 않는다. 그말은 애니메이션이되는 layer가아니라 가만히 있는 layer에 설정해주면 성능향상에 좋다는 것.&lt;/p&gt;

&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.raywenderlich.com/10317653-calayer-tutorial-for-ios-getting-started&quot;&gt;Raywender 참고&lt;/a&gt;
&lt;a href=&quot;https://www.appcoda.com/calayer-introduction/&quot;&gt;appcoda blog 참고&lt;/a&gt;&lt;/p&gt;</content><author><name>Napster</name></author><summary type="html">CALayer의 개념을 알아보자!</summary></entry><entry><title type="html">JK가 보내주신 개발자의 단계</title><link href="http://localhost:4000/%EB%82%B4%EC%83%9D%EA%B0%81/myopinion/" rel="alternate" type="text/html" title="JK가 보내주신 개발자의 단계" /><published>2020-04-21T00:00:00+09:00</published><updated>2020-04-21T00:00:00+09:00</updated><id>http://localhost:4000/%EB%82%B4%EC%83%9D%EA%B0%81/myopinion</id><content type="html" xml:base="http://localhost:4000/%EB%82%B4%EC%83%9D%EA%B0%81/myopinion/">&lt;h1 id=&quot;나의-위치를-가늠해-볼-수-있는-약간의-시야&quot;&gt;나의 위치를 가늠해 볼 수 있는 약간의 시야&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;다음은 JK가 보내주신 포스팅이다.&lt;/p&gt;

&lt;p&gt;소프트웨어 개발 업계에 20년정도 있으면서 면접도 수백번 보고 여러 종류의 회사(단순 SW 하청 계약직부터 글로벌 SW기업까지)를 거치다보니 소프트웨어 엔지니어를 보는 개인적인 최소한의 룰(?)이 생긴것이 있는데, 이를 공유해볼까 합니다. 승진에 대한 피드백을 주다보니 자연스럽게 정리가 되더라고요. 매니지먼트 트랙이 아닌 개인 공헌자(IC)의 레벨에 대한 이야기이고 물론 개인적인 견해입니다.&lt;br /&gt;
먼저 연차는 크게 의미 없을 수가 있습니다. 그렇지만, (1년차 경험을 10년동안 하는 것이 아니라) 매년 비슷한 일만 반복하지 않고 도전적으로 성장을 해왔다고 가정하면 대략적인 연차는 의미가 있습니다.  경험은 압축해서 전달할 수 있는 것이 절대 아니라는 것을 알 수 있었습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Associate Level: 갓 학교 졸업한 수준의 레벨인데, 이 분들은 명확하게 주어진 문제를 잘 풀풀면 됩니다. (기초 문제 해결 역량) 이것을 보는 가장 비용 효율적인 방법은 그냥 코딩 테스트를 보는 것입니다. 일반적으로 코딩 테스트는 입력과 출력이 명확하게 정해져있기 때문에 이것을 해결할 수 있는지(문제 해결), 인터뷰를 통해 어떻게 커뮤니케이션(협력)하고 접근하는지(태도)를 볼 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Mid Level: 대략 3~7년차 경험을 가진 SW엔지니어. 이 레벨은 약간의 모호한(?) 문제를 풀 수 있는 사람입니다. SW개발 프로젝트를 해보면 역시나 문제가 명확하게 정의되어 있지 않는 경우가 많습니다. 대략적으로 풀어야 할 문제는 정해져있는데, 세부적인 기획이나 설계가 없는 경우입니다. (약간의 회색 지대도 있고요.) 이런 경우 이해 당사자들과 협업을 하면서 풀어야할 문제를 구체화하고(설계) 그 문제를 풀수 있는 능력(문제 해결)이 필요합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Senior Level: 대략 7년차 이상 경험을 가진 SW엔지니어를 말하는데, 사실 이쪽은 레인지가 상당히 넓습니다. (경력 20년 이상인 분들도 많음) 그래서, 좀 큰 회사들은 Senior I, Senior II 또는 Lead, Staff등의 세분화된 등급으로 나누기도 합니다. 그래서, “딱 이런사람이 시니어다.”라는 것은 회사마다 업계마다 너무 달라서 정의하기 힘들지만, 최소한의 공통점은 찾을 수 있었습니다. 바로 이분들은 모호한 문제 해결을 넘어서, 주어진 프로젝트 상황에서 무엇을 풀어야 하는지 문제를 정의(!)할 수 있는 사람입니다. 프로젝트 단계(프로토타입-프리프로덕션-프로덕션-런칭)별로 어떤 문제를 우선적으로 풀어야 할지 정의할 수 있습니다. 그렇기 때문에 시니어 레벨이 있으면 프로젝트를 마칠수 있는 최소한(!)의 엔지니어링 역량을 가졌다고 보면 될 것 같습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Principal Level:  이분들은 일반적으로 SW엔지니어링 자체에만 매몰되지 않고 비즈니스 플로우에 대한 관심도 갖고 있기에 하나의 프로젝트를 넘어서 회사내의 여러 프로젝트에서 공통적으로 개선할 수 있는 부분들에 대한 Architecting이 가능한 것을 볼 수 있었습니다. 그래서 단순히 문제 정의를 넘어서, 여러 명이 먹고살(?) 길을 만드는 분들입니다. 그리고 이론적 기반같은 그 도메인의 Fundamental에 대해 상당히 깊은 이해를 갖고 있기 때문에 해당 도메인에 대한 끝판왕 같은 포스를 보여줍니다. 즉, 인더스트리 롤 모델 같은 분들입니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Distinguished (Fellow) Level: 전세계적으로 SW 업계에서 누구나 다 아는 유명 엔지니어들..&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;체계(?), 대규모조직(많은 개발인력)일 수록 단계가 많이 나눠질 것 같다. 아직 경험해 보지 못해서 정확히 알 수는 없다.
 내가 몸담고 있는 회사에서는 적어도 2,3단계는 섞여 있는 것 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;주어진-프로젝트-상황에서-무엇을-풀어야-하는지-문제를-정의-할-수-있는-사람이-시니어&quot;&gt;“주어진 프로젝트 상황에서 무엇을 풀어야 하는지 문제를 정의! 할 수 있는 사람이 시니어.”&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;그렇다면 나는 어디에 속할 수 있고 어느 범주에 들어 갈 수 있는가? (2년차 개발자로써)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;3,4에 속할 수 있도록 힘써야겠다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;어느 글에서 연차는 중요 하지 않다고 쓰여진 것을 보았다. 그렇게 되려면 현재의 모습에 안주해서는 안된다.&lt;/p&gt;</content><author><name>Napster</name></author><summary type="html">나의 위치를 가늠해 볼 수 있는 약간의 시야 다음은 JK가 보내주신 포스팅이다.</summary></entry><entry><title type="html">[Raywenderlich] Concurrency 1: 소개</title><link href="http://localhost:4000/concurrency/Concurrency1/" rel="alternate" type="text/html" title="[Raywenderlich] Concurrency 1: 소개" /><published>2020-04-20T00:00:00+09:00</published><updated>2020-04-20T00:00:00+09:00</updated><id>http://localhost:4000/concurrency/Concurrency1</id><content type="html" xml:base="http://localhost:4000/concurrency/Concurrency1/">&lt;h1 id=&quot;concurrency란-무엇인가&quot;&gt;Concurrency란 무엇인가?&lt;/h1&gt;
&lt;p&gt;회사의 프로젝트를 진행하면서 iOS의 동시성 프로그래밍의 개념 공부가 필요해졌었다. 
필요로 했던 기능은 이미지 업로드 서버 요청과 동시에 UI에 업로드 중이라는 변화를 보여줘야하는 기능이었다.&lt;/p&gt;

&lt;p&gt;가장 기본적인 내용인 UI는 꼭 Main Thread에서 실행해야한다 정도만 알고 있었고, 어떻게 다른 Thread에게 일을 시키면 되는지 알고 싶어 공부하게 되었다.&lt;/p&gt;

&lt;p&gt;책에서는 Concurrency, 동시성을 간단하게 말하고 있다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“같은 실행시간 동안 앱의 로직이나 랜덤하게 코드가 실행할때, 여전히 정확한 데이터 플로우대로 결과를 보여줘야 한다는 것.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;덮붙혀 모던 기기들은 한개 이상의 CPU를 가지고 있기 때문에, Single task 이상의 작업을 같은 시간안에 해결 할 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;Q. 여담으로 A13칩은 몇코어?(6코어…)
&lt;img src=&quot;/assets/images/post-concurrency/1_apple_a13_bionic.jpg&quot; alt=&quot;&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;왜-concurrency를-사용-해야-하는가&quot;&gt;왜 Concurrency를 사용 해야 하는가?&lt;/h1&gt;
&lt;p&gt;중요한 이야기다. 앱의 사용성을 높이기 위해서 사용해야한다. 너무 당연한 이야기 아닌가? 만약 MainThreed에서 동시에 여러일을 하게되면 분명히 UI는 프리징 되어 보여질 것!!
동시성을 사용하면서 생길 수 있는 좋은 부작용은 기능을 추가할때 전반적인 설계를 하는데 조금 더 많은 시간이 걸린 다는 것이다.&lt;/p&gt;

&lt;h1 id=&quot;그럼-어떻게-사용하는데&quot;&gt;그럼 어떻게 사용하는데?&lt;/h1&gt;
&lt;p&gt;이게 이 시리즈의 초점이라고한다.(당연한 소’릴…)&lt;/p&gt;

&lt;p&gt;이 책을 끝맞치면 이런 스킬들이 생긴단다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;높은 수준의 구조를 가진 앱이 같은 시간안에 여러 태스크들을 동시에 실핼 할 수 있게 도와준다.&lt;/li&gt;
  &lt;li&gt;각자 다른 리소스에 태스크들이 접근을 할때, 공유 리소스는 읽기 전용으로만, 접근이 가능한 다른 쓰레드에서는 좀더 빠른 프로세싱을 할 수 있게 접근을 허용 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;결론&quot;&gt;결론&lt;/h1&gt;

&lt;p&gt;당연한 소리를 하고있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;틀린점이나 이상한점이 있다면 제보 감사합니다. :)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Napster</name></author><summary type="html">Concurrency란 무엇인가? 회사의 프로젝트를 진행하면서 iOS의 동시성 프로그래밍의 개념 공부가 필요해졌었다. 필요로 했던 기능은 이미지 업로드 서버 요청과 동시에 UI에 업로드 중이라는 변화를 보여줘야하는 기능이었다.</summary></entry><entry><title type="html">Hello Swift World!</title><link href="http://localhost:4000/%EC%8B%9C%EC%9E%91/Hello-Swift/" rel="alternate" type="text/html" title="Hello Swift World!" /><published>2020-04-20T00:00:00+09:00</published><updated>2020-04-20T00:00:00+09:00</updated><id>http://localhost:4000/%EC%8B%9C%EC%9E%91/Hello%20Swift</id><content type="html" xml:base="http://localhost:4000/%EC%8B%9C%EC%9E%91/Hello-Swift/">&lt;h1 id=&quot;hello-swift-world&quot;&gt;Hello Swift World!&lt;/h1&gt;

&lt;p&gt;안녕하세요?
첫번째 포스팅입니다. 앞으로 블로그를 어떻게 운영하면 좋을지에 대한 간략한 소개들 정도 되겠네요.&lt;/p&gt;

&lt;p&gt;저는 iOS개발자 입니다. 아직 한참 배울께 많죠. 그래서 아는 것도 다시한번 정리해보는 시간을 갖는 것과 잘못 알고 있는 것을 피드백을 통해 고치려고합니다. 알게된 것들은 구글 검색을 통해 알게되는 것도 있겠지만 공식문서를 기반으로 알아가보려합니다.&lt;/p&gt;

&lt;p&gt;매주 혹은 2주마다 하나씩 큰 주제를 정하고 그에 맞는 공식문서의 내용과 내가 생각한게 맞는지를 검증하는 코드와 함께 포스팅을 할 예정입니다.&lt;/p&gt;

&lt;p&gt;꾸준히 블로그를 할 수 있길 바라며 이글을 시작으로 블로그를 시작해보려합니다.&lt;/p&gt;

&lt;p&gt;감사합니다.&lt;/p&gt;

&lt;p&gt;Napster.&lt;/p&gt;</content><author><name>Napster</name></author><summary type="html">Hello Swift World!</summary></entry></feed>